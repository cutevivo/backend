/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 10:57:51 GMT 2019
 */

package com.cutevivo.backend.ServiceImpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cutevivo.backend.Entity.User;
import com.cutevivo.backend.Repository.NoteRepository;
import com.cutevivo.backend.Repository.UserRepository;
import com.cutevivo.backend.ServiceImpl.UserServiceImpl;
import com.cutevivo.backend.utils.ResultMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserServiceImpl_ESTest extends UserServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      NoteRepository noteRepository0 = mock(NoteRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "noteRepository", (Object) noteRepository0);
      ResultMessage resultMessage0 = mock(ResultMessage.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultMessage0).getObject();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(resultMessage0).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      // Undeclared exception!
      try { 
        userServiceImpl0.checkRepeat("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cutevivo.backend.ServiceImpl.UserServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      NoteRepository noteRepository0 = mock(NoteRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "noteRepository", (Object) noteRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((ResultMessage) null).when(userRepository0).saveUser(any(com.cutevivo.backend.Entity.User.class));
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      ResultMessage resultMessage0 = userServiceImpl0.addUser(user0);
      assertNull(resultMessage0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      NoteRepository noteRepository0 = mock(NoteRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "noteRepository", (Object) noteRepository0);
      ResultMessage resultMessage0 = mock(ResultMessage.class, new ViolatedAssumptionAnswer());
      doReturn("").when(resultMessage0).getObject();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(resultMessage0).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      // Undeclared exception!
      try { 
        userServiceImpl0.checkRepeat("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.List
         //
         verifyException("com.cutevivo.backend.ServiceImpl.UserServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      NoteRepository noteRepository0 = mock(NoteRepository.class, new ViolatedAssumptionAnswer());
      doReturn((ResultMessage) null).when(noteRepository0).findNotesByUserId(anyLong());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "noteRepository", (Object) noteRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      ResultMessage resultMessage0 = userServiceImpl0.getUserNotes((-1291L));
      assertNull(resultMessage0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      NoteRepository noteRepository0 = mock(NoteRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "noteRepository", (Object) noteRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((ResultMessage) null).when(userRepository0).findUserById(anyLong());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      ResultMessage resultMessage0 = userServiceImpl0.getUserById(1L);
      assertNull(resultMessage0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      NoteRepository noteRepository0 = mock(NoteRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "noteRepository", (Object) noteRepository0);
      // Undeclared exception!
      try { 
        userServiceImpl0.addUser(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cutevivo.backend.ServiceImpl.UserServiceImpl", e);
      }
  }
}
